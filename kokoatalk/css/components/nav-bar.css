.nav {
    position: fixed;
    bottom: 0;
    width: 100%;
    background-color: #f9f9fa;
      padding:20px 50px;
      box-sizing: border-box;
      /* box의 사이즈를 늘리지 않고 padding값을 주고 싶을때 사용. 
      ex. padding값을 50px로 주고 싶은데, 박스 사이즈는 200px로 유지하고 싶을때 사용하면 박스의 사이즈는 그대로 유지하되,
      그 안에서 padding의 값을 갖게 함. */
      border-top: 1px solid rgba(121, 121, 121, 0.3);
}

.nav__list {
    display: flex;
    justify-content: space-between;
}

.nav__link {
    position: relative;
    color: #2e363e;
}

@keyframes notificationanimation {
    0%{
transform: none;
    }
    50%{
transform: translateY(-5px) rotateY(360deg);
    }
    100%{
transform: none;
    }
}

 .nav__notification {
    position: absolute;
    /* position: absolte는 가장 가까운 relative는 가진 부모 기준으로 움직임*/
    left: 15px;
    bottom: 15px;
    animation: notificationanimation 2s ease-in-out infinite;
}
.nav__update {
    background-color: tomato;
    width: 8px;
    height: 8px;
    border-radius: 15px;
    display: flex;
    justify-content: center;
    align-items: center;
    position: absolute;
    left: 30px;
    bottom: 30px;
}
/* 이건 내가 한거 */

@keyframes appearBtnAnimation {
    from{
/* transform: translateX(50px); 를 .nav__btn에 넣는 이유는 초기 위치가 다르기 때문!
 keyframes에 작성하면, 아이콘이 원래 위치했던 기존 자리에서 자신의 차레를 기다렸다가 애니메이션 효과가 적용되지만, 
 .nav__btn에 작성하면 어떤 아이콘이든 translateX(50px)의 위치에서 애니메이션이 시작됨 */
opacity: 0;
    }
    to{
transform: none;
opacity: 1;
    }
}

.nav__btn {
transform: translateY(50px);
/* 아이콘의 초기 위치 결정 */
opacity: 0;
animation: appearBtnAnimation 0.3s ease-in-out forwards;
}
.nav__btn:nth-child(2) {
animation-delay: 0.2s;
}

.nav__btn:nth-child(3) {
animation-delay: 0.5s;
}
.nav__btn:last-child {
animation-delay: 0.8s;
}